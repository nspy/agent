
#include "Agent.h"

/******************************************************************************/

void
SNMP_Channel_Callback(SNMP_ChannelPtr,int, void*);

int
OpenFlow_Driver_Callback(OpenFlow_DriverPtr, OpenFlow_Driver_Callback_Type, struct ofp_header*);

X_CorePtr
X_Core_New(void);

X_CorePtr
X_Core_New_From(X_CorePtr);

void
X_Core_Pre_Init(X_CorePtr pCore);

int
X_Core_Load_From_File(X_CorePtr, const char *);

/******************************************************************************/

int
X_Core_Init(X_CorePtr pCore)
{
    if (pCore == NULL)
        return 1;

    pCore->SnmpChannel = SNMP_Channel_New(&pCore->SnmpConf);

    if (pCore->SnmpChannel == NULL)
        return 1;

    pCore->SnmpTrapHandler = SNMP_TrapHandler_New(pCore->SnmpTrap);

    if (pCore->SnmpTrapHandler == NULL)
        return 1;

    pCore->Resources = X_Resource_New();

    pCore->Ports = X_List_New((X_ListMemFree_t)(free));

    pCore->OpenFlowDrv = OpenFlow_Driver_New();

    OpenFlow_Driver_Set_UserData(pCore->OpenFlowDrv, pCore);
    OpenFlow_Driver_Set_Callback(pCore->OpenFlowDrv, OPENFLOW_DRV_CB_FEATURES_REQ, OpenFlow_Driver_Callback);
    OpenFlow_Driver_Set_Callback(pCore->OpenFlowDrv, OPENFLOW_DRV_CB_MESSAGE, OpenFlow_Driver_Callback);
    OpenFlow_Driver_Set_Callback(pCore->OpenFlowDrv, OPENFLOW_DRV_CB_DISCONNECTED, OpenFlow_Driver_Callback);

    X_Resource_Set_User_Data(pCore->Resources, pCore);

    pCore->Resources->SNMPChan = pCore->SnmpChannel;

    SNMP_Channel_SetCallback(pCore->SnmpChannel, SNMP_CHANNEL_CB_READY, SNMP_Channel_Callback);
    SNMP_Channel_SetCallback(pCore->SnmpChannel, SNMP_CHANNEL_CB_CONN_CREATED, SNMP_Channel_Callback);
    SNMP_Channel_SetCallback(pCore->SnmpChannel, SNMP_CHANNEL_CB_CONN_DESTROYED, SNMP_Channel_Callback);
    SNMP_Channel_SetCallback(pCore->SnmpChannel, SNMP_CHANNEL_CB_MOD_CREATED, SNMP_Channel_Callback);
    SNMP_Channel_SetCallback(pCore->SnmpChannel, SNMP_CHANNEL_CB_MOD_DESTROYED, SNMP_Channel_Callback);
    SNMP_Channel_SetCallback(pCore->SnmpChannel, SNMP_CHANNEL_CB_OL_CREATED, SNMP_Channel_Callback);
    SNMP_Channel_SetCallback(pCore->SnmpChannel, SNMP_CHANNEL_CB_OL_DESTROYED, SNMP_Channel_Callback);

    SNMP_Channel_Set_Context(pCore->SnmpChannel,(void*)pCore);

    SNMP_TrapHandler_Add(pCore->SnmpTrapHandler, pCore->SnmpChannel);

    SNMP_TrapHandler_Start(pCore->SnmpTrapHandler);

    SNMP_Channel_Start(pCore->SnmpChannel);

    SNMP_Channel_Init(pCore->SnmpChannel);

    return (0);
}

X_CorePtr
X_Core_New(void)
{
    X_CorePtr pCore = (X_CorePtr)(malloc(sizeof(X_Core)));
    if (pCore != NULL)
    {
        X_Core_Pre_Init(pCore);
    }
    return pCore;
}

X_CorePtr
X_Core_New_From(X_CorePtr pCoreConf)
{
    X_CorePtr pCore = X_Core_New();

    /** Copy configuration **/
    SNMP_Channel_Conf_Copy(&pCore->SnmpConf, &pCoreConf->SnmpConf);

    memcpy(pCore->SnmpTrap, pCoreConf->SnmpTrap, sizeof(pCore->SnmpTrap));

    memcpy(pCore->OpenFlowAddr, pCoreConf->OpenFlowAddr, sizeof(pCore->OpenFlowAddr));

    /** Now initialize **/
    X_Core_Init(pCore);

    return pCore;
}

void
X_Core_Pre_Init(X_CorePtr pCore)
{
    if (pCore == NULL)
        return;

    SNMP_Channel_Conf_Init(&pCore->SnmpConf);
    strncpy(pCore->SnmpTrap, "0.0.0.0:1620", sizeof(pCore->SnmpTrap));
    strncpy(pCore->OpenFlowAddr, "192.168.1.1:6633",sizeof(pCore->OpenFlowAddr));

    pCore->SnmpChannel = NULL;
    pCore->Resources = NULL;
    pCore->SnmpTrapHandler = NULL;
    pCore->OpenFlowDrv = NULL;

    pCore->SysIP = 0;
    pCore->Ports = NULL;
}

int
X_Core_Load_From_File(X_CorePtr pCore, const char *path)
{
    xmlNodePtr root, node;
    xmlDocPtr doc;
    xmlChar *s;

    if (pCore == NULL || path == NULL)
    {
        return -1;
    }

    ////
    doc = xmlParseFile(path);

    if (doc == NULL)
    {
        return (-1);
    }

    root = xmlDocGetRootElement(doc);

    if (root == NULL)
    {
        xmlFreeDoc(doc);
        return (-1);
    }

    if (xmlStrcasecmp((xmlChar*)"config",root->name))
    {
        xmlFreeDoc(doc);
        return (-1);
    }

    for (node = root->children; node; node = node->next)
    {
        if (node->type != XML_ELEMENT_NODE)
        {
            continue;
        }

        if (!xmlStrcasecmp((xmlChar*) "host",node->name))
        {
            s = xmlNodeGetContent(node);
            SNMP_Channel_Conf_Set_Host(&pCore->SnmpConf,(char*) s);
            xmlFree(s);
        }
        else if (!xmlStrcasecmp((xmlChar*) "community",node->name))
        {
            s = xmlNodeGetContent(node);
            SNMP_Channel_Conf_Set_Community(&pCore->SnmpConf,(char*) s);
            xmlFree(s);
        }
        else if (!xmlStrcasecmp((xmlChar*) "trap",node->name))
        {
            s = xmlNodeGetContent(node);
            strncpy(pCore->SnmpTrap,(char*)s,sizeof(pCore->SnmpTrap));
            xmlFree(s);
        }
        else if (!xmlStrcasecmp((xmlChar*) "poll",node->name))
        {
            s = xmlNodeGetContent(node);
            pCore->SnmpConf.PollTimeout = atoi((char*) s);
            xmlFree(s);
        }
        else if (!xmlStrcasecmp((xmlChar*) "cpreload",node->name))
        {
            s = xmlNodeGetContent(node);
            pCore->SnmpConf.CPReloadTimeout = atoi((char*) s);
            xmlFree(s);
        }
        else if (!xmlStrcasecmp((xmlChar*)"openflow", node->name))
        {
            s = xmlNodeGetContent(node);
            strncpy(pCore->OpenFlowAddr,(char*)s,sizeof(pCore->OpenFlowAddr));
            xmlFree(s);
        }
    }

    xmlFreeDoc(doc);

    return (0);
}

/**
 * Create X_Core from the configuration stored in a XML file.
 */
X_CorePtr
X_Core_Create_From_File(const char *path)
{
    X_Core core;
    X_CorePtr pCore;

    X_Core_Pre_Init(&core);

    X_Core_Load_From_File(&core, path);

    pCore = X_Core_New_From(&core);

    return pCore;
}

void
X_Core_Free(X_CorePtr pCore)
{
    if (pCore != NULL)
    {
        return;
    }

    if (pCore->SnmpTrapHandler)
    {
        SNMP_TrapHandler_Free(pCore->SnmpTrapHandler);
    }

    if (pCore->SnmpChannel)
    {
        SNMP_Channel_Stop(pCore->SnmpChannel);

        SNMP_Channel_Free(pCore->SnmpChannel);
    }

    if (pCore->Resources)
    {
        X_Resource_Free(pCore->Resources);
    }

    free (pCore);
}

void
X_Core_Generate_OpenFlow_Ports(X_CorePtr pCore)
{
    struct ofp_phy_cport *port;
    X_ListNodePtr pNode;
    X_ModulePtr pMod;
    X_ResourcePtr pRes;
    int PortBase = 1000;
    unsigned int PeerIP;
    int PeerOL;

    assert (pCore != NULL);

    pRes = pCore->Resources;

    X_List_ForEach((&pRes->Modules), pNode)
    {
        pMod = (X_ModulePtr)(pNode->Data);

        // generate port description only for OLs and ADAPT modules
        if (pMod->ModType != X_MOD_TYPE_ADAPT && pMod->ModType != X_MOD_TYPE_OL)
        {
            continue;
        }

        port = malloc(sizeof(struct ofp_phy_cport));

        if (port == NULL)
            continue;

        memset(port, 0, sizeof(struct ofp_phy_cport));

        if (pMod->ModType == X_MOD_TYPE_ADAPT)
        {
            port->port_no = htons(++PortBase);
        }
        else
        {
            port->port_no = htons(pMod->Addr.Shelf - X_RES_OL_SHELF_BASE);

            if (pCore->SnmpChannel)
            {
                if (0 == FindPeer(pCore->SnmpChannel->InventoryCP.TENumLinks,
                        pCore->SnmpChannel->InventoryCP.TEUnnumLinks,
                        pCore->SnmpChannel->Inventory.NE.SysIP,
                        pMod->Addr.Shelf - X_RES_OL_SHELF_BASE,
                        &PeerIP, &PeerOL))
                {
                    X_LOGINFO(X_LOG_RES_ID, "Found peer for OL-%d: %s / OL-%d",
                            pMod->Addr.Shelf - X_RES_OL_SHELF_BASE,
                            inet_ntoa(*((struct in_addr*)&PeerIP)),
                            PeerOL);
                    // ??? //

                    port->peer_datapath_id = htonll(PeerIP);
                    port->peer_port_no = htons(PeerOL);
                }
            }
        }

        *(unsigned int*)(&port->hw_addr) = pMod->Index;

        strcpy((char*)port->name, pMod->Aid);

        port->config = htonl((OFPPC_NO_FLOOD | OFPPC_NO_STP | OFPPC_NO_PACKET_IN));
        port->supp_swtype = htons(OFPST_WAVE);

        // TODO:
        // assign bandwidth according to constraints bitmaps from the line port


        X_List_Append(pCore->Ports, port);
    }


    X_List_ForEach(pCore->Ports, pNode)
    {
        port = (struct ofp_phy_cport*)(pNode->Data);

        X_Resource_Printf("Port: %d name = %s", ntohs(port->port_no), (char*)port->name);
        X_Resource_Printf("HW: %x:%x:%x:%x:%x:%x (%08x)",
                port->hw_addr[0],port->hw_addr[1],port->hw_addr[2],
                port->hw_addr[3],port->hw_addr[4],port->hw_addr[5],
                (*(unsigned int*)(port->hw_addr)));
    }
}

void
X_Core_Handle_Features_Request(X_CorePtr pCore)
{
    X_ListNodePtr pNode;
    struct ofp_switch_features *osf;
    struct ofp_phy_cport *opcp;
    char tmp[4096];
    size_t len = sizeof(struct ofp_switch_features);
    int i;

    osf = (struct ofp_switch_features*)tmp;
    osf->datapath_id = htobe64(pCore->SysIP);

    // cports
    i = 0;
    X_List_ForEach(pCore->Ports, pNode)
    {
        opcp = (struct ofp_phy_cport*)pNode->Data;
        memcpy(tmp + len + i * (sizeof(struct ofp_phy_cport)), opcp,
                sizeof(struct ofp_phy_cport));
        i++;
    }

    len += (i) * (sizeof(struct ofp_phy_cport));

    osf->n_cports = (X_List_Size(pCore->Ports));

    osf->header.type = OFPT_FEATURES_REPLY;
    osf->header.length = htons(len);
    osf->header.version = OFP_VERSION;
    osf->header.xid = htonl(1);

    _OpenFlow_Driver_Send_Raw(pCore->OpenFlowDrv, (char*)osf, len);
}

void
X_Core_Switching_Constraints(X_CorePtr pCore)
{
    X_ResourcePtr               pRes;
    X_ListNodePtr               pNode, pNode2;
    X_ModulePtr                 pMod, pMod2;
    X_ListPtr                   PathList;
    X_PathDataPtr               pPathData;
    unsigned int                NumOfPorts;
    unsigned int                ReachablePorts;
    X_ListPtr                   PortList;
    struct ofp_phy_cport*       pPort;
    struct ofp_phy_cport*       pPort0;
    char                        Raw[4096];
    int                         i;
    unsigned int                Len;
    unsigned int                Num;

    struct ooe_header*                  Header;
    struct ooe_port_constraints*        PortConst;
    struct ooe_switch_constraints*      SwConst;

    pRes = pCore->Resources;

    fprintf(stderr, "X_Core_Switchin_Constraints()...\r\n");

    PathList = X_List_New((X_ListMemFree_t)X_PathData_Free);
    PortList = X_List_New(NULL);

    NumOfPorts = 0;
    Num = 0;
    Len = 0;

   // Raw = Vector_New(sizeof(char), 4096, NULL);

    Header = (struct ooe_header*)&Raw[0];

    Header->header.type = OFPT_VENDOR;
    Header->header.version = OFP_VERSION;
    Header->vendor = htonl(OOE_VENDOR_ID);
    Header->subtype = htonl(OOE_SWITCH_CONSTRAINTS_REPLY);

    Len += sizeof(struct ooe_header);

    SwConst = (struct ooe_switch_constraints*)&Raw[Len];
    SwConst->dpid = htobe64(pCore->SysIP);

    Len += sizeof(struct ooe_switch_constraints);

//    PortConst = SwConst->portc;

    X_List_ForEach((&pRes->Modules), pNode)
    {
        pMod = (X_ModulePtr)(pNode->Data);

        if (pMod->ModType != X_MOD_TYPE_ADAPT && pMod->ModType != X_MOD_TYPE_OL)
        {
            continue;
        }

        NumOfPorts++;
    }

    X_List_ForEach((&pRes->Modules), pNode)
    {
        pMod = (X_ModulePtr)(pNode->Data);

        if (pMod->ModType != X_MOD_TYPE_ADAPT && pMod->ModType != X_MOD_TYPE_OL)
        {
            continue;
        }

        pPort0 = X_Core_Find_Port(pCore, pMod);

        X_List_Clear(PathList);

        X_Resource_GetPathsTree(pRes, pMod, X_RES_DIR_OUT, 0, 0, PathList);

        X_List_Clear(PortList);

        X_List_RForEach(PathList, pNode2)
        {
            pPathData = (X_PathDataPtr)pNode2->Data;

            if (pPathData == NULL)
                continue;

            pMod2 = pPathData->Port->Module;

            if (pMod2 == pMod)
                continue;

            if (pMod2->ModType == X_MOD_TYPE_ADAPT || pMod2->ModType == X_MOD_TYPE_OL)
            {
                pPort = X_Core_Find_Port(pCore, pMod2);

                if (pPort != NULL)
                    X_List_Append(PortList, pPort);
            }
        }

        if (X_List_Size(PortList) > 0)
        {
            // generate constraints data

            PortConst = (struct ooe_port_constraints*)&Raw[Len];
            PortConst->port_no = pPort0->port_no;
            PortConst->num = htons(X_List_Size(PortList));

            i = 0;
            X_List_ForEach(PortList, pNode2)
            {
                pPort = (struct ofp_phy_cport*)pNode2->Data;
                PortConst->ports[i++] = (pPort->port_no);
            }

            if (i % 2)
            {
                PortConst->ports[i++] = 0;
            }

            Len += sizeof(struct ooe_port_constraints) + sizeof(uint16_t) * i;
            Num++;
        }
    }

    if (Num > 0)
    {
        Header->header.length = htons(Len);
        SwConst->num = htonl(Num);
        _OpenFlow_Driver_Send_Raw(pCore->OpenFlowDrv, Header, Len);
    }
}

void
X_Core_Handle_OpenFlow_Message(X_CorePtr pCore, struct ofp_header *pMsg)
{
    struct ofp_vendor_header *ofv;
    struct ofp_error_msg err;
    struct ooe_header* ooe_hdr;
    struct ofp_cflow_mod *cflow_mod;
    uint16_t wildcards = htons(OFPCW_IN_WPORT|OFPCW_OUT_WPORT);
    size_t freq = 0;
    struct ofp_wave_port in, out, *pwave;
    X_ListNodePtr pNode;



    if (pMsg->type == OFPT_VENDOR)
    {
        fprintf(stderr, "VENDOR message\r\n");

        ofv = (struct ofp_vendor_header*) (pMsg);

        if (ntohl(ofv->vendor) == OOE_VENDOR_ID)
        {
            ooe_hdr = (struct ooe_header*)(pMsg);

            if (ntohl(ooe_hdr->subtype) == OOE_SWITCH_CONSTRAINTS_REQUEST)
            {
                X_Core_Switching_Constraints(pCore);
                return;
            }
        }

        err.header.type = OFPT_ERROR;
        err.header.xid = ofv->header.xid;
        err.header.version = OFP_VERSION;
        err.header.length = htons(sizeof(struct ofp_error_msg));

        err.type = htons(OFPET_BAD_REQUEST);
        err.code = htons(OFPBRC_BAD_VENDOR);
        _OpenFlow_Driver_Send_Raw(pCore->OpenFlowDrv,(char*)&err,sizeof(err));

        return;
    }


    if (pMsg->type == OFPT_CFLOW_MOD)
    {
        cflow_mod = (struct ofp_cflow_mod*)pMsg;

        if (cflow_mod == NULL)
            return;

        if (cflow_mod->command != htons(OFPFC_ADD) &&
                cflow_mod->command != htons(OFPFC_DELETE))
        {
            fprintf(stderr, "Unsupported command\n");
            return;
        }

        if(cflow_mod->connect.wildcards != wildcards)
        {
            return;
        }

        pwave = (struct ofp_wave_port*)&cflow_mod->connect.in_port;

        memcpy(&in, pwave, sizeof(in));

        pwave += 1;

        memcpy(&out, pwave, sizeof(out));

        printf("IN: %d OUT: %d\n", ntohs(in.wport), ntohs(out.wport));

        struct ofp_phy_cport *port_in = NULL, *port_out = NULL, *ofport;

        X_List_ForEach(pCore->Ports, pNode)
        {
            ofport = (struct ofp_phy_cport*)(pNode->Data);

            if (ofport->port_no == in.wport)
            {
                port_in = ofport;
            }
            else if (ofport->port_no == out.wport)
            {
                port_out = ofport;
            }

            if (port_in && port_out)
                break;
        }

        if (!port_in || !port_out)
        {
            printf("Wrong port!?\n");
        }

        freq = ntohl(in.wavelength); // HACK!


        X_Addr inaddr, outaddr;

        X_Addr_Parse(&inaddr, (char*)port_in->name);
        X_Addr_Parse(&outaddr, (char*)port_out->name);

        X_ModulePtr pMod = X_Resource_FindModule(pCore->Resources, &inaddr);
        X_ModulePtr pMod2 = X_Resource_FindModule(pCore->Resources, &outaddr);

        if (!pMod || !pMod2)
        {
            printf("No matching module found!\n");
        }


        X_ListPtr pList = X_List_New((X_ListMemFree_t) X_PathData_Free);

        X_Resource_Find_Path(pCore->Resources,X_RES_DIR_IN,freq,pMod,pMod2,pList);
        if (cflow_mod->command == htons(OFPFC_ADD))
        {
            X_Allocate_Resource(pCore->Resources,pList,freq);
        }
        else
        {
            X_Deallocate_Resources(pCore->Resources,pList,freq);
        }
        X_List_Clear(pList);

        X_Resource_Find_Path(pCore->Resources,X_RES_DIR_OUT,freq,pMod,pMod2,pList);
        if (cflow_mod->command == htons(OFPFC_ADD))
        {
            X_Allocate_Resource(pCore->Resources,pList,freq);
        }
        else
        {
            X_Deallocate_Resources(pCore->Resources,pList,freq);
        }
        X_List_Clear(pList);

        X_List_Free(pList);

    }


}

struct ofp_phy_cport*
X_Core_Find_Port(X_CorePtr pCore, X_ModulePtr pMod)
{
    X_ListNodePtr               pNode;
    struct ofp_phy_cport*       pPort;

    if (pCore == NULL || pMod == NULL)
        return NULL;

    X_List_ForEach(pCore->Ports, pNode)
    {
        pPort = (struct ofp_phy_cport*)(pNode->Data);

        if (pMod->Index == *(unsigned int*)pPort->hw_addr)
            return pPort;
    }
    return NULL;
}

/******************************************************************************/

void
SNMP_Channel_Callback(SNMP_ChannelPtr pCh, int type, void *data)
{
    X_CorePtr pCore;
    X_ListNodePtr pNode;
    X_ResourcePtr pRsrc;

    pCore = pCh->Context;

    if (pCore == NULL) return;

    pRsrc = pCore->Resources;

     X_Resource_Lock(pRsrc);

    if (type == SNMP_CHANNEL_CB_READY)
    {
        X_List_ForEach(pCh->Inventory.ShelfList, pNode)
        {
            X_LoadEntityShelf(pRsrc,(EntityShelf*) pNode->Data,X_RES_OPER_CREATE);
        }

        X_List_ForEach(pCh->Inventory.ModuleList, pNode)
        {
            X_LoadEntityModule(pRsrc,(EntityModule*) pNode->Data,X_RES_OPER_CREATE);
        }

        X_List_ForEach(pCh->Inventory.ExtObjList, pNode)
        {
            X_LoadEntityModule(pRsrc,(EntityModule*)pNode->Data, X_RES_OPER_CREATE);
        }

        X_List_ForEach(pCh->Inventory.OLList, pNode)
        {
            X_LoadEntityOL(pRsrc,(EntityOL*) pNode->Data,X_RES_OPER_CREATE);
        }

        X_List_ForEach(pCh->Inventory.ConnectionList, pNode)
        {
            X_LoadEntityConnection(pRsrc,(EntityConnection*) pNode->Data,1);
        }

        // Configuration was loaded - now prepare the list of OpenFlow enabled ports

        pCore->SysIP = pCh->Inventory.NE.SysIP;

        X_List_Clear(pCore->Ports);

        X_Core_Generate_OpenFlow_Ports(pCore);

        //OF_Driver_Connect(pCore->OpenFlowChannel,pCore->OpenFlowAddr,0);

        OpenFlow_Driver_Start(pCore->OpenFlowDrv);

        OpenFlow_Driver_Connect(pCore->OpenFlowDrv,pCore->OpenFlowAddr);

    }
    else if (type == SNMP_CHANNEL_CB_CONN_DESTROYED)
    {
        X_LoadEntityConnection(pRsrc,(EntityConnection*) data,X_RES_OPER_DESTROY);
    }
    else if (type == SNMP_CHANNEL_CB_CONN_CREATED)
    {
        X_LoadEntityConnection(pRsrc,(EntityConnection*) data, X_RES_OPER_CREATE);
    }
    else if (type == SNMP_CHANNEL_CB_MOD_CREATED)
    {
        X_LoadEntityModule(pRsrc,(EntityModule*) data, X_RES_OPER_CREATE);
    }
    else if (type == SNMP_CHANNEL_CB_MOD_DESTROYED)
    {
        X_LoadEntityModule(pRsrc,(EntityModule*) data,X_RES_OPER_DESTROY);
    }
    else if (type == SNMP_CHANNEL_CB_OL_CREATED)
    {
        X_LoadEntityOL(pRsrc,(EntityOL*) data,X_RES_OPER_CREATE);
    }
    else if (type == SNMP_CHANNEL_CB_OL_DESTROYED)
    {
        X_LoadEntityOL(pRsrc,(EntityOL*) data,X_RES_OPER_DESTROY);
    }

    X_Resource_Unlock(pRsrc);
}

int
OpenFlow_Driver_Callback(OpenFlow_DriverPtr pDrv, OpenFlow_Driver_Callback_Type type, struct ofp_header *pMsg)
{
    X_CorePtr pCore;

    if (pDrv == NULL)
        return 0;

    pCore = (X_CorePtr)pDrv->UserData;

    switch (type)
    {
    case OPENFLOW_DRV_CB_FEATURES_REQ:
        X_Core_Handle_Features_Request(pCore);
        break;

    case OPENFLOW_DRV_CB_MESSAGE:
        X_Core_Handle_OpenFlow_Message(pCore, pMsg);
        break;

    case OPENFLOW_DRV_CB_DISCONNECTED:
        break;

    default:
        break;
    }

    return 0;
}
